// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "cheese/v1/cheese.proto" (package "cheese.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message cheese.v1.GetOneCheeseRequest
 */
export interface GetOneCheeseRequest {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message cheese.v1.GetOneCheeseResponse
 */
export interface GetOneCheeseResponse {
    /**
     * @generated from protobuf field: cheese.v1.Cheese cheese = 1;
     */
    cheese?: Cheese;
}
/**
 * @generated from protobuf message cheese.v1.GetAllCheesesRequest
 */
export interface GetAllCheesesRequest {
}
/**
 * @generated from protobuf message cheese.v1.GetAllCheesesResponse
 */
export interface GetAllCheesesResponse {
    /**
     * @generated from protobuf field: repeated cheese.v1.Cheese cheeses = 1;
     */
    cheeses: Cheese[];
}
/**
 * @generated from protobuf message cheese.v1.Cheese
 */
export interface Cheese {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string departement = 2;
     */
    departement: string;
    /**
     * @generated from protobuf field: string fromage = 3;
     */
    fromage: string;
    /**
     * @generated from protobuf field: string pageFrancaise = 4;
     */
    pageFrancaise: string;
    /**
     * @generated from protobuf field: string pageAnglaise = 5;
     */
    pageAnglaise: string;
    /**
     * @generated from protobuf field: string lait = 6;
     */
    lait: string;
    /**
     * @generated from protobuf field: string geoShape = 7;
     */
    geoShape: string;
    /**
     * @generated from protobuf field: string geoPoint2D = 8;
     */
    geoPoint2D: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetOneCheeseRequest$Type extends MessageType<GetOneCheeseRequest> {
    constructor() {
        super("cheese.v1.GetOneCheeseRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<GetOneCheeseRequest>): GetOneCheeseRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        if (value !== undefined)
            reflectionMergePartial<GetOneCheeseRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOneCheeseRequest): GetOneCheeseRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOneCheeseRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cheese.v1.GetOneCheeseRequest
 */
export const GetOneCheeseRequest = new GetOneCheeseRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOneCheeseResponse$Type extends MessageType<GetOneCheeseResponse> {
    constructor() {
        super("cheese.v1.GetOneCheeseResponse", [
            { no: 1, name: "cheese", kind: "message", T: () => Cheese }
        ]);
    }
    create(value?: PartialMessage<GetOneCheeseResponse>): GetOneCheeseResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetOneCheeseResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOneCheeseResponse): GetOneCheeseResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cheese.v1.Cheese cheese */ 1:
                    message.cheese = Cheese.internalBinaryRead(reader, reader.uint32(), options, message.cheese);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOneCheeseResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cheese.v1.Cheese cheese = 1; */
        if (message.cheese)
            Cheese.internalBinaryWrite(message.cheese, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cheese.v1.GetOneCheeseResponse
 */
export const GetOneCheeseResponse = new GetOneCheeseResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllCheesesRequest$Type extends MessageType<GetAllCheesesRequest> {
    constructor() {
        super("cheese.v1.GetAllCheesesRequest", []);
    }
    create(value?: PartialMessage<GetAllCheesesRequest>): GetAllCheesesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetAllCheesesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllCheesesRequest): GetAllCheesesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetAllCheesesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cheese.v1.GetAllCheesesRequest
 */
export const GetAllCheesesRequest = new GetAllCheesesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllCheesesResponse$Type extends MessageType<GetAllCheesesResponse> {
    constructor() {
        super("cheese.v1.GetAllCheesesResponse", [
            { no: 1, name: "cheeses", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Cheese }
        ]);
    }
    create(value?: PartialMessage<GetAllCheesesResponse>): GetAllCheesesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cheeses = [];
        if (value !== undefined)
            reflectionMergePartial<GetAllCheesesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllCheesesResponse): GetAllCheesesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cheese.v1.Cheese cheeses */ 1:
                    message.cheeses.push(Cheese.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllCheesesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cheese.v1.Cheese cheeses = 1; */
        for (let i = 0; i < message.cheeses.length; i++)
            Cheese.internalBinaryWrite(message.cheeses[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cheese.v1.GetAllCheesesResponse
 */
export const GetAllCheesesResponse = new GetAllCheesesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Cheese$Type extends MessageType<Cheese> {
    constructor() {
        super("cheese.v1.Cheese", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 2, name: "departement", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fromage", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "pageFrancaise", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "pageAnglaise", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "lait", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "geoShape", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "geoPoint2D", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Cheese>): Cheese {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "0";
        message.departement = "";
        message.fromage = "";
        message.pageFrancaise = "";
        message.pageAnglaise = "";
        message.lait = "";
        message.geoShape = "";
        message.geoPoint2D = "";
        if (value !== undefined)
            reflectionMergePartial<Cheese>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cheese): Cheese {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toString();
                    break;
                case /* string departement */ 2:
                    message.departement = reader.string();
                    break;
                case /* string fromage */ 3:
                    message.fromage = reader.string();
                    break;
                case /* string pageFrancaise */ 4:
                    message.pageFrancaise = reader.string();
                    break;
                case /* string pageAnglaise */ 5:
                    message.pageAnglaise = reader.string();
                    break;
                case /* string lait */ 6:
                    message.lait = reader.string();
                    break;
                case /* string geoShape */ 7:
                    message.geoShape = reader.string();
                    break;
                case /* string geoPoint2D */ 8:
                    message.geoPoint2D = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Cheese, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== "0")
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string departement = 2; */
        if (message.departement !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.departement);
        /* string fromage = 3; */
        if (message.fromage !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fromage);
        /* string pageFrancaise = 4; */
        if (message.pageFrancaise !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.pageFrancaise);
        /* string pageAnglaise = 5; */
        if (message.pageAnglaise !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.pageAnglaise);
        /* string lait = 6; */
        if (message.lait !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.lait);
        /* string geoShape = 7; */
        if (message.geoShape !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.geoShape);
        /* string geoPoint2D = 8; */
        if (message.geoPoint2D !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.geoPoint2D);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cheese.v1.Cheese
 */
export const Cheese = new Cheese$Type();
/**
 * @generated ServiceType for protobuf service cheese.v1.CheeseAPI
 */
export const CheeseAPI = new ServiceType("cheese.v1.CheeseAPI", [
    { name: "GetOneCheese", options: {}, I: GetOneCheeseRequest, O: GetOneCheeseResponse },
    { name: "GetAllCheeses", options: {}, I: GetAllCheesesRequest, O: GetAllCheesesResponse }
]);
