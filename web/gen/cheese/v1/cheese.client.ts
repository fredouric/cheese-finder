// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "cheese/v1/cheese.proto" (package "cheese.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CheeseAPI } from "./cheese";
import type { GetAllCheesesResponse } from "./cheese";
import type { GetAllCheesesRequest } from "./cheese";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetOneCheeseResponse } from "./cheese";
import type { GetOneCheeseRequest } from "./cheese";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service cheese.v1.CheeseAPI
 */
export interface ICheeseAPIClient {
    /**
     * @generated from protobuf rpc: GetOneCheese(cheese.v1.GetOneCheeseRequest) returns (cheese.v1.GetOneCheeseResponse);
     */
    getOneCheese(input: GetOneCheeseRequest, options?: RpcOptions): UnaryCall<GetOneCheeseRequest, GetOneCheeseResponse>;
    /**
     * @generated from protobuf rpc: GetAllCheeses(cheese.v1.GetAllCheesesRequest) returns (cheese.v1.GetAllCheesesResponse);
     */
    getAllCheeses(input: GetAllCheesesRequest, options?: RpcOptions): UnaryCall<GetAllCheesesRequest, GetAllCheesesResponse>;
}
/**
 * @generated from protobuf service cheese.v1.CheeseAPI
 */
export class CheeseAPIClient implements ICheeseAPIClient, ServiceInfo {
    typeName = CheeseAPI.typeName;
    methods = CheeseAPI.methods;
    options = CheeseAPI.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetOneCheese(cheese.v1.GetOneCheeseRequest) returns (cheese.v1.GetOneCheeseResponse);
     */
    getOneCheese(input: GetOneCheeseRequest, options?: RpcOptions): UnaryCall<GetOneCheeseRequest, GetOneCheeseResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetOneCheeseRequest, GetOneCheeseResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllCheeses(cheese.v1.GetAllCheesesRequest) returns (cheese.v1.GetAllCheesesResponse);
     */
    getAllCheeses(input: GetAllCheesesRequest, options?: RpcOptions): UnaryCall<GetAllCheesesRequest, GetAllCheesesResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAllCheesesRequest, GetAllCheesesResponse>("unary", this._transport, method, opt, input);
    }
}
